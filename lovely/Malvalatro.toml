[manifest]
version = "1.0.0"
priority = -10


[[patches]]
[patches.pattern]
target = 'card.lua'
match_indent = true
position = 'after'
pattern = '''
self.added_to_deck = true
'''
payload = '''
if self.playing_card then
    if next(SMODS.find_card('j_mal_jacker', false)) then
        local suit_prefix = string.sub(self.base.suit, 1, 1)..'_'
        self:set_base(G.P_CARDS[suit_prefix..'J'])
    end
end
'''


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
position = 'after'
pattern = '''
card.playing_card = G.playing_card
'''
payload = '''
if next(SMODS.find_card('j_mal_jacker', false)) then
    local suit_prefix = string.sub(card.base.suit, 1, 1)..'_'
    card:set_base(G.P_CARDS[suit_prefix..'J'])
end
'''


[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
match_indent = true
position = 'at'
pattern = '''
if G.GAME.blind.name == 'The Serpent' and
    not G.GAME.blind.disabled and
    (G.GAME.current_round.hands_played > 0 or
    G.GAME.current_round.discards_used > 0) then
        hand_space = math.min(#G.deck.cards, 3)
end
'''
payload = '''
if G.GAME.blind.name == 'The Serpent' and
    not G.GAME.blind.disabled and
    (G.GAME.current_round.hands_played > 0 or
    G.GAME.current_round.discards_used > 0) then
        hand_space = math.min(#G.deck.cards, 3)
elseif next(SMODS.find_card('j_mal_serpent_oil', false)) and
    (G.GAME.current_round.hands_played > 0 or
    G.GAME.current_round.discards_used > 0) then
        if hand_space < 3 then
            hand_space = math.min(#G.deck.cards, 3)
        end
end
'''


[[patches]]
[patches.regex]
target = 'card.lua'
position = 'after'
pattern = '''get_id\(\) == [^)^\s]+'''
payload = ''')'''


[[patches]]
[patches.regex]
target = 'card.lua'
position = 'at'
pattern = '''get_id\(\) == '''
payload = '''is_rank('''


[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
match_indent = true
position = 'at'
pattern = '''
function get_X_same(num, hand)
  local vals = {{},{},{},{},{},{},{},{},{},{},{},{},{},{}}
  for i=#hand, 1, -1 do
    local curr = {}
    table.insert(curr, hand[i])
    for j=1, #hand do
      if hand[i]:get_id() == hand[j]:get_id() and i ~= j then
        table.insert(curr, hand[j])
      end
    end
    if #curr == num then
      vals[curr[1]:get_id()] = curr
    end
  end
  local ret = {}
  for i=#vals, 1, -1 do
    if next(vals[i]) then table.insert(ret, vals[i]) end
  end
  return ret
end
'''
payload = '''
function get_X_same(num, hand)
  local vals = {{},{},{},{},{},{},{},{},{},{},{},{},{},{}}
  for i=#hand, 1, -1 do
    local curr = {}
    table.insert(curr, hand[i])
    for j=1, #hand do
      if hand[i]:is_rank(hand[j]:get_id()) and i ~= j then
        table.insert(curr, hand[j])
      end
    end
    if #curr == num then
      local val = curr[1]:get_id()
      if curr[1]:is_rank(2) then
        val = 2
      end
      vals[val] = curr
    end
  end
  local ret = {}
  for i=#vals, 1, -1 do
    if next(vals[i]) then table.insert(ret, vals[i]) end
  end
  return ret
end
'''


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
position = 'after'
pattern = '''amount = amount or 1'''
payload = '''
for _, v in pairs(SMODS.find_card('j_mal_diploma', false)) do
  amount = amount + G.P_CENTERS.j_mal_diploma.config.extra.levels
end'''


[[patches]]
[patches.pattern]
target = 'card.lua'
match_indent = true
position = 'after'
pattern = '''self.sell_cost = math.max(1, math.floor(self.cost/2)) + (self.ability.extra_value or 0)'''
payload = '''
if self.edition and self.edition.key == "e_mal_phantom" then self.sell_cost = 0 + (self.ability.extra_value or 0) end'''


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
position = 'before'
pattern = '''for k, v in ipairs(_starting_pool) do'''
payload = '''local voucher_repeat = G:get_mandrake()
'''


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
position = 'at'
pattern = '''if not G.GAME.used_vouchers[v.key] then'''
payload = '''if not (G.GAME.used_vouchers[v.key] and not (next(SMODS.find_card('j_mal_mandrake', false)) and voucher_repeat[v.key])) then'''


[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
match_indent = true
position = 'after'
pattern = '''local center = G.P_CENTERS.b_red'''
payload = '''
if not forced_key and (_type == 'Tarot' and next(SMODS.find_card('j_mal_haunted', false))) then
  if pseudorandom('haunted') < G.GAME.probabilities.normal / G.P_CENTERS.j_mal_haunted.config.extra.odds then
    _type = 'Spectral'
  end
end'''


[[patches]]
[patches.pattern]
target = 'card.lua'
match_indent = true
position = 'at'
pattern = '''if self.edition and self.edition.negative and G.jokers then'''
payload = '''if self.edition and (self.edition.negative or self.edition.key == "e_mal_phantom") and G.jokers then'''
